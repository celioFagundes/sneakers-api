# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Category {
  id: String
  name: String
  slug: String
}

type Brand {
  id: String
  name: String
  slug: String
  logo: String
}

type VariationPublic {
  size: String!
  sku: String!
  weight: Float!
  stock: Int!
}

type Color {
  colorName: String!
  colorCode: String!
}

type ProductPublic {
  id: String
  category: Category
  brand: Brand
  name: String
  description: String
  price: Float
  slug: String
  gender: String
  material: String
  color: Color
  variations: [VariationPublic!]
  images: [String!]
}

type Cursor {
  beforeCursor: String
  afterCursor: String
}

type PagingResult {
  data: [ProductPublic!]!
  cursor: Cursor
}

type User {
  id: String
  name: String
  email: String
  role: String!
}

type AuthToken {
  refreshToken: String!
  accessToken: String!
}

type AuthSession {
  id: String!
  userAgent: String
  lastUsedAt: DateTime
  active: Boolean
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Query {
  getAllCategories: [Category!]!
  getCategoryById(id: String!): Category!
  getCategoryBySlug(slug: String!): Category!
  getAllProducts(input: ProductFilter, afterCursor: String, beforeCursor: String): PagingResult!
  getProductsByCategory(categorySlug: String!): [ProductPublic!]!
  getProductsByCategoryLimited(categorySlug: String!): [ProductPublic!]!
  getProductsByBrand(brandSlug: String!): [ProductPublic!]!
  getProductsByBrandAndGender(brandSlug: String!, gender: String!, limit: Int): [ProductPublic!]!
  getProductsByBrandLimited(brandSlug: String!): [ProductPublic!]!
  getProductsByName(name: String!): [ProductPublic!]!
  getProductById(id: String!): ProductPublic!
  getProductBySlug(slug: String!): ProductPublic!
  getAllBrands: [Brand!]!
  getBrandById(id: String!): Brand!
  getBrandBySlug(slug: String!): Brand!
  panelGetAllUsers: [User!]!
  panelGetUserById(id: String!): User!
  panelGetUserByEmail(email: String!): User!
  panelGetMe: User!
  panelGetAllUserSessions(id: String!): [AuthSession!]!
}

input ProductFilter {
  brandSlug: String
  categorySlug: String
  gender: String
}

type Mutation {
  panelCreateCategory(input: CategoryCreateInput!): Category!
  panelUpdateCategory(input: CategoryUpdateInput!): Category!
  panelDeleteCategory(id: String!): Boolean!
  panelCreateProduct(input: ProductCreateInput!): ProductPublic!
  panelUpdateProduct(input: ProductUpdateInput!): ProductPublic!
  panelDeleteProduct(id: String!): Boolean!
  panelUploadProductImage(id: String!, file: Upload!): Boolean!
  panelDeleteProductImage(id: String!, url: String!): Boolean!
  panelCreateBrand(input: BrandCreateInput!): Brand!
  panelUpdateBrand(input: BrandUpdateInput!): Brand!
  panelDeleteBrand(id: String!): Boolean!
  panelUploadBrandLogo(id: String!, file: Upload!): Boolean!
  panelRemoveBrandLogo(id: String!): Boolean!
  panelCreateUser(input: UserCreateInput!): User!
  panelUpdateUser(input: UserUpdateInput!): User!
  panelChangeUserPassword(input: UserChangePasswordInput!): Boolean!
  panelDeleteUser(id: String!): Boolean!
  auth(input: AuthUserInput!): AuthToken!
  accessToken(refreshToken: String!): String!
  panelInvalidateUserSession(id: String!): Boolean!
}

input CategoryCreateInput {
  name: String!
  slug: String!
}

input CategoryUpdateInput {
  id: String!
  name: String!
  slug: String!
}

input ProductCreateInput {
  category: String!
  brand: String!
  name: String!
  description: String!
  price: Float!
  slug: String!
  gender: ProductGender!
  material: String!
  color: ColorInput!
  variations: [VariationInput!]!
}

enum ProductGender {
  MEN
  WOMEN
  UNISEX
}

input ColorInput {
  colorName: String!
  colorCode: String!
}

input VariationInput {
  size: String!
  sku: String!
  weight: Float!
  stock: Int!
}

input ProductUpdateInput {
  id: String!
  category: String!
  brand: String!
  name: String!
  description: String!
  price: Float!
  slug: String!
  gender: ProductGender!
  material: String!
  color: ColorInput!
  variations: [VariationInput!]!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input BrandCreateInput {
  name: String!
  slug: String!
}

input BrandUpdateInput {
  id: String!
  name: String!
  slug: String!
}

input UserCreateInput {
  name: String!
  password: String!
  email: String!
  role: UserRole!
}

enum UserRole {
  ADMIN
  USER
}

input UserUpdateInput {
  id: String!
  name: String!
  email: String!
  role: UserRole!
}

input UserChangePasswordInput {
  id: String!
  password: String!
}

input AuthUserInput {
  email: String!
  password: String!
}